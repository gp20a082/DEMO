//***************************************************************
//  LCD関数
//                                          2014/02/25 H. Suzuki
//***************************************************************

//-------------------------------------------------------------------------
//  ポート定義
//-------------------------------------------------------------------------
#define   LCD_DT      IO.PDR5.BYTE      // LCDデータポートP50-53:4bit
#define   LCD_RS      IO.PDR5.BIT.B4    // LCD制御ポート RS
#define   LCD_E       IO.PDR5.BIT.B5    // LCD制御ポート E
// LCD制御ポート RW は常に書き込み'W'なのでGNDに直結

//-------------------------------------------------------------------------
//  グローバル変数定義
//-------------------------------------------------------------------------
unsigned char   LCD_DATA[ 16 ];         // LCD表示データ
unsigned short  LCD_FLAG;               // 0 : LCDの初期化中
unsigned short  LCD_PT;                 // LCDの表示用ポインタ

//---------------------------------------------------------------
//  関数プロトタイプ宣言
//---------------------------------------------------------------
void LCD_init( void );
void LCD( void );
void LCD_clear( void );
void LCD_print( int LCD_pt, char *pt );
void LCD_dec_out( int pt, int x, int n );
void LCD_com4( int x );
void LCD_com8( int x );
void LCD_dat8( int x );
void LCD_wait( int n );

//--------------------------------------------------------------------------
//  LCD_init : LCDモジュールの初期化
//     使用例 : LCD_init()
//--------------------------------------------------------------------------
void LCD_init( void )
{
  LCD_FLAG = 0; // LCDの表示を禁止（初期化前だから）

  // LCD Initiallize ( 4-bit interface mode ) 
  LCD_wait( 30000 );  // 30ms wait (適当)
  LCD_com4( 0x02 );   // Function set
  LCD_com4( 0x02 );   // 
  LCD_com4( 0x08 );   // 2lines, 5*7dots
  LCD_wait(  100 );   // 39us wait (適当)
  LCD_com4( 0x00 );   // Display ON/OFF Control
  LCD_com4( 0x0c );   //   Disp on, Cursor off, Brink off
  LCD_wait(  100 );   // 39us wait (適当)
  LCD_com4( 0x00 );   // Display Clear
  LCD_com4( 0x01 );   //
  LCD_wait( 10000 );  // 1.53ms wait (適当)
  LCD_com4( 0x00 );   // Entry Mode Set
  LCD_com4( 0x06 );   //   Increment, not shifted

  LCD_clear();  // LCD Clear
  LCD_FLAG = 1; // LCDの表示を許可
  LCD_PT = 0;   // ポインタを初期値に移動
}

//--------------------------------------------------------------------------
//  LCD : LCD表示処理
//     使用例 : LCD()
//--------------------------------------------------------------------------
void LCD( void )
{
  if( LCD_FLAG == 1 ){  // LCD_FLAGが1ならLCDの表示を更新する
    LCD_PT++; 
    if( LCD_PT > 17 ) LCD_PT = 0;
    if( LCD_PT == 0 ) LCD_com8( 0x80 );     // 位置を1行目先頭にセット
    else if( LCD_PT <  9 ) LCD_dat8( LCD_DATA[ LCD_PT - 1 ] );
    else if( LCD_PT == 9 ) LCD_com8( 0xc0 );// 位置を2行目先頭にセット
    else                   LCD_dat8( LCD_DATA[ LCD_PT - 2 ] );
  }
}

//--------------------------------------------------------------------------
//  LCD_clear : LCD表示をクリアする
//     使用例 : LCD_clear()
//--------------------------------------------------------------------------
void LCD_clear( void )
{
  int x;
  for( x = 0; x < 16; x++ ) LCD_DATA[ x ] = ' ';
}

//--------------------------------------------------------------------------
//  LCD_print : LCDに文字列を表示する
//     使用例 : LCD_print( 先頭位置, "文字列" )
//--------------------------------------------------------------------------
void LCD_print( int LCD_pt, char *pt )
{
  while( *pt )  LCD_DATA[ LCD_pt++ ] = *pt++;
}

//--------------------------------------------------------------------------
//  LCD_dec_out : LCDにデータを10進で表示する
//     使用例 : LCD_dec_out( 先頭位置, データ, 桁数 )
//--------------------------------------------------------------------------
void LCD_dec_out( int pt, int x, int n )
{
  int y;
  if ( n > 4 ){ y = 10000; LCD_DATA[ pt++ ] = '0' + x / y; x = x % y; }
  if ( n > 3 ){ y = 1000;  LCD_DATA[ pt++ ] = '0' + x / y; x = x % y; }
  if ( n > 2 ){ y = 100;   LCD_DATA[ pt++ ] = '0' + x / y; x = x % y; }
  if ( n > 1 ){ y = 10;    LCD_DATA[ pt++ ] = '0' + x / y; x = x % y; }
                           LCD_DATA[ pt++ ] = '0' + x;
}

//--------------------------------------------------------------------------
//  LCD_com4 : 4ビットコマンドを送信
//     使用例 : LCD_com4( コマンド )
//--------------------------------------------------------------------------
void LCD_com4( int x )
{
  LCD_E = 0; LCD_RS = 0;
  LCD_DT = ( LCD_DT & 0xf0 ) | ( x & 0x0f );  // データセット
  LCD_E = 1; LCD_E = 0;                       // 送信
}

//--------------------------------------------------------------------------
//  LCD_com8 : 8ビットコマンドを4ビットずつに区切って送信
//    使用例 : LCD_com8( コマンド )
//--------------------------------------------------------------------------
void LCD_com8( int x )
{
  LCD_com4( ( x >> 4 ) & 0x0f );  // 上位4bit 送信
  LCD_com4( x & 0x0f );           // 下位4bit 送信
}

//--------------------------------------------------------------------------
//  LCD_dat8 : 8ビットデータを4ビットずつに区切って送信
//    使用例 : LCD_dat8( データ )
//--------------------------------------------------------------------------
void LCD_dat8( int x )
{
  LCD_E = 0; LCD_RS = 1;
  LCD_DT = ( LCD_DT & 0xf0 ) | ( ( x >> 4 ) & 0x0f ); // データセット
  LCD_E = 1; LCD_E = 0;                               // 上位4bit 送信
  LCD_DT = ( LCD_DT & 0xf0 ) | ( x & 0x0f );          // データセット
  LCD_E = 1; LCD_E = 0;                               // 下位4bit 送信
}

//--------------------------------------------------------------------------
//  LCD_wait : LCD用wait関数
//    使用例 : LCD_wait( 数値 )
//--------------------------------------------------------------------------
void LCD_wait( int n )
{
  volatile int x;
  for( x = 0; x < n; x++ );
}

